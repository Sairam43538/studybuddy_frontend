import React, { useState, useCallback } from 'react';
import { useDropzone } from 'react-dropzone';
import { UploadCloud, FileText, X, Loader2, CheckCircle, AlertTriangle } from 'lucide-react';

// --- LIVE API INTEGRATION (CORRECTED) ---
// This function now handles the actual API call to your backend.
const uploadNoteApi = async (file, details, authToken) => {
    // CORRECTED: The API endpoint for creating a note is /api/notes/
    const apiUrl = 'https://4087b3f75dcb.ngrok-free.app/api/notes/';

    // The API expects multipart/form-data, so we create a FormData object.
    const formData = new FormData();
    
    // Per the API spec, we send 'title' and 'file'.
    formData.append('title', details.title);
    formData.append('file', file);

    // The 'course_code' is also an accepted optional field.
    if (details.courseCode) {
        formData.append('course_code', details.courseCode);
    }
    
    // NOTE: 'keywords' and 'unit' are not part of the initial upload schema
    // in the provided OpenAPI spec, so they are not included in this request.
    // Keywords are expected to be generated by the backend.

    // We use the fetch API to make the request.
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            // The 'Authorization' header is required for protected endpoints.
            'Authorization': `Bearer ${authToken}`,
            // IMPORTANT: Do NOT set the 'Content-Type' header for FormData.
            // The browser sets it automatically with the correct boundary.
        },
        body: formData,
    });

    // The API returns 202 Accepted on success. Any other status is treated as an error.
    if (response.status !== 202) {
        let errorData;
        try {
            errorData = await response.json();
        } catch (e) {
            errorData = { detail: 'An unexpected error occurred. Please try again.' };
        }
        // We throw an error with the message from the backend.
        throw new Error(errorData.detail || 'Failed to upload file.');
    }

    // If the response is 202, we parse the success data.
    return await response.json();
};
// --- END API INTEGRATION ---


// Main Notes Upload Component
export default function NotesUpload() {
    const [title, setTitle] = useState("");
    const [keywords, setKeywords] = useState("");
    const [courseCode, setCourseCode] = useState("");
    const [unit, setUnit] = useState("");
    const [file, setFile] = useState(null);
    
    // 'idle', 'uploading', 'success', 'error'
    const [status, setStatus] = useState('idle');
    const [message, setMessage] = useState('');

    const onDrop = useCallback(acceptedFiles => {
        setFile(acceptedFiles[0]);
        setStatus('idle');
        setMessage('');
    }, []);

    const { getRootProps, getInputProps, isDragActive } = useDropzone({
        onDrop,
        accept: { 'application/pdf': ['.pdf'], 'application/vnd.ms-powerpoint': ['.ppt', '.pptx'], 'application/msword': ['.doc', '.docx'] },
        maxFiles: 1,
    });

    // Added stopPropagation to prevent the dropzone from opening.
    const removeFile = (e) => {
        e.stopPropagation();
        setFile(null);
    };

    const resetForm = () => {
        setTitle('');
        setKeywords('');
        setCourseCode('');
        setUnit('');
        setFile(null);
        setStatus('idle');
        setMessage('');
    };
    
    const formatSize = (size) => 
        size > 1024 * 1024 
            ? `${(size / (1024 * 1024)).toFixed(2)} MB` 
            : `${(size / 1024).toFixed(2)} KB`;

    const handleUpload = async () => {
        if (!file || !title) { // Keywords is not a required field for the API call itself
            setStatus('error');
            setMessage('Please provide a title and select a file.');
            return;
        }
        
        setStatus('uploading');
        setMessage('');
        
        // In a real app, this token would come from your global auth state (Context, Redux, etc.)
        const authToken = localStorage.getItem("access_token"); 
        if (!authToken) {
            setStatus('error');
            setMessage('You must be logged in to upload notes.');
            // Optionally, redirect to login page
            // window.location.href = "/auth"; 
            return;
        }

        try {
            // We only pass the fields the API expects
            await uploadNoteApi(file, { title, courseCode }, authToken);
            setStatus('success');
            // The API spec indicates a 202 response, meaning it's processing.
            setMessage('Upload accepted! Your note is being processed.');
            setTimeout(resetForm, 3000);
        } catch (error) {
            setStatus('error');
            setMessage(error.message);
        }
    };

    return (
        <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4 sm:p-6 lg:p-8 flex items-center justify-center">
            <div className="max-w-2xl w-full">
                <div className="bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-2xl">
                    <div className="text-center mb-8">
                        <UploadCloud className="w-12 h-12 mx-auto text-indigo-500" />
                        <h2 className="text-3xl font-extrabold text-gray-900 dark:text-white mt-4">Upload Study Material</h2>
                        <p className="text-gray-500 dark:text-gray-400 mt-2">Share your notes and help the community grow.</p>
                    </div>

                    <div className="space-y-6">
                        {/* File Dropzone */}
                        <div {...getRootProps()} className={`p-8 border-2 border-dashed rounded-xl text-center cursor-pointer transition-colors ${isDragActive ? 'border-indigo-500 bg-indigo-50 dark:bg-indigo-900/20' : 'border-gray-300 dark:border-gray-600 hover:border-indigo-400'}`}>
                            <input {...getInputProps()} />
                            {file ? (
                                <div className="flex flex-col items-center">
                                    <FileText className="w-10 h-10 text-indigo-500" />
                                    <p className="mt-2 font-semibold text-gray-700 dark:text-gray-200">{file.name}</p>
                                    <p className="text-sm text-gray-500">{formatSize(file.size)}</p>
                                    <button onClick={removeFile} className="mt-3 text-sm font-semibold text-red-500 hover:text-red-700 flex items-center gap-1 z-10 relative">
                                        <X className="w-4 h-4" /> Remove File
                                    </button>
                                </div>
                            ) : (
                                <div className="flex flex-col items-center">
                                    <UploadCloud className="w-10 h-10 text-gray-400" />
                                    <p className="mt-2 font-semibold text-gray-600 dark:text-gray-300">Drag & drop a file here, or click to select</p>
                                    <p className="text-xs text-gray-400 dark:text-gray-500 mt-1">PDF, DOCX, PPTX supported</p>
                                </div>
                            )}
                        </div>

                        {/* Form Fields */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <input type="text" placeholder="Note Title*" value={title} onChange={e => setTitle(e.target.value)} required className="w-full p-3 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-500" />
                            <input type="text" placeholder="Course Code (e.g., CS-303)" value={courseCode} onChange={e => setCourseCode(e.target.value)} className="w-full p-3 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-500" />
                            {/* The following fields are for UI only and not sent in the initial API call based on the spec */}
                            <input type="text" placeholder="Keywords (will be auto-generated)" value={keywords} onChange={e => setKeywords(e.target.value)} className="w-full p-3 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-500" />
                            <input type="number" placeholder="Unit (optional metadata)" value={unit} onChange={e => setUnit(e.target.value)} className="w-full p-3 bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-indigo-500" />
                        </div>

                        {/* Status Messages */}
                        {message && (
                            <div className={`p-3 rounded-lg text-center font-medium text-sm flex items-center justify-center gap-2 ${status === 'success' ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-300'}`}>
                                {status === 'success' ? <CheckCircle className="w-5 h-5"/> : <AlertTriangle className="w-5 h-5"/>}
                                {message}
                            </div>
                        )}

                        {/* Upload Button */}
                        <button 
                            onClick={handleUpload}
                            disabled={status === 'uploading'}
                            className="w-full flex items-center justify-center p-4 text-lg font-bold text-white bg-indigo-600 rounded-lg shadow-md hover:bg-indigo-700 transition-all disabled:bg-gray-400 disabled:cursor-not-allowed"
                        >
                            {status === 'uploading' ? (
                                <>
                                    <Loader2 className="w-6 h-6 mr-3 animate-spin" />
                                    Processing...
                                </>
                            ) : 'Upload Note'}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}
